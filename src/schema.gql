# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Expense {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  vehicles: [Vehicle!]!
}

type MaintainTask {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String!
  maintainProgramTask: [MaintainProgramTask!]!
}

type MaintainProgramTask {
  id: Int!
  createdAt: String!
  updatedAt: String!
  timeThreshold: Float!
  distanceThreshold: Float!
  done: Boolean!
  maintainProgram: MaintainProgram!
  maintainTask: MaintainTask!
}

type MaintainProgram {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String!
  vehicles: [Vehicle!]!
  maintainProgramTask: [MaintainProgramTask!]!
}

type Manufacturer {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  vehicles: [Vehicle!]!
}

type Report {
  id: Int!
  createdAt: String!
  updatedAt: String!
  driver: Driver!
}

type Project {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String
  start: DateTime!
  end: DateTime!
  value: String!
  place: String
  companyRole: String!
  progress: Float!
  mobilizationSessions: [MobilizationSession!]!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type ProjectDriver {
  id: Int!
  createdAt: String!
  updatedAt: String!
  driver: Driver!
  project: Project!
  manager: Manager!
}

type RefillHistory {
  id: Int!
  createdAt: String!
  updatedAt: String!
  driver: Driver!
  vehicle: Vehicle!
  type: RefillHistoryType!
  time: DateTime!
  price: String!
  currentPrice: String!
}

# Refill history type
enum RefillHistoryType {
  GASOLINE
  OIL
}

type MaintainHistory {
  id: Int!
  createdAt: String!
  updatedAt: String!
  driver: Driver!
  vehicle: Vehicle!
  type: MaintainHistoryType!
  time: DateTime!
}

# Maintain history type
enum MaintainHistoryType {
  MAINTAINCE
  REPAIR
}

type Label {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  issues: [Label!]!
}

type Issue {
  id: Int!
  createdAt: String!
  updatedAt: String!
  description: String!
  status: String!
  dueDate: DateTime!
  assignees: [Employee!]!
  vehicle: Vehicle!
  labels: [Label!]
}

type Place {
  province: String!
  district: String!
  village: String!
}

type Employee {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  phone: String
  address: String
  dateOfBirth: String
  salary: Float
  unit: String
  startWork: String
  endWork: String
  driver: Driver
  manager: Manager
  issues: Issue
}

type Driver {
  id: Int!
  createdAt: String!
  updatedAt: String!
  licenseNumber: String
  licenseClass: String
  licenseWhere: String
  employee: Employee!
  account: Account
  reports: [Report!]!
  projectDrivers: [ProjectDriver!]!
  refillHistories: [RefillHistory!]!
  maintainHistories: [MaintainHistory!]!
  mobilizationSessions: [MobilizationSession!]!
}

type Permission {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  roles: [Role!]!
}

type Role {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  accounts: [Account!]!
  permissions: [Permission!]!
}

type Account {
  id: Int!
  createdAt: String!
  updatedAt: String!
  email: String!
  avatar: String
  password: String!
  verify: Boolean!
  lastActive: String!
  root: Boolean
  driver: Driver
  manager: Manager
  roles: [Role!]!
}

type ManagerProject {
  id: Int!
  createdAt: String!
  updatedAt: String!
  manager: Manager!
  project: Project!
}

type ProjectVehicle {
  id: Int!
  createdAt: String!
  updatedAt: String!
  driver: Driver!
  project: Project!
  manager: Manager!
}

type Manager {
  id: Int!
  createdAt: String!
  updatedAt: String!
  employee: Employee!
  account: Account
  projectDrivers: [ProjectDriver!]!
  managerProjects: [ManagerProject!]!
  projectVehicles: [ProjectDriver!]!
  decisions: [Decision!]!
}

type Decision {
  id: Int!
  createdAt: String!
  updatedAt: String!
  manager: Manager!
  mobilizationSessions: [MobilizationSession!]!
}

type MobilizationSession {
  id: Int!
  createdAt: String!
  updatedAt: String!
  start: DateTime!
  startOdometer: Float!
  end: DateTime
  endOdometer: Float
  pending: Boolean!
  driver: Driver!
  manager: Manager!
  vehicle: Vehicle!
  decision: Decision!
  project: Project
  description: String!
}

type VehicleFuel {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  vehicles: [Vehicle!]!
}

type VehicleModel {
  id: Int!
  createdAt: String!
  updatedAt: String!
  manufacturer: Manufacturer!
  name: String!
  vehicles: [Vehicle!]!
}

type VehicleStatus {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String
  background: String
  vehicles: [Vehicle!]!
}

type VehicleType {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  vehicles: [Vehicle!]!
}

type Vehicle {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  weight: Float!
  information: String!
  description: String!
  maintainTime: Float!
  hoursWorked: Float!
  guaranteeTime: DateTime!
  odometer: Float!
  speed: Float!
  vin: String!
  license_plate: String!
  year: String!
  runTime: Float!
  manufacturer: Manufacturer!
  model: VehicleModel!
  status: VehicleStatus!
  fuel: VehicleFuel!
  type: VehicleType!
  expenses: [Expense!]!
  mobilizationSessions: [MobilizationSession!]!
  maintainPrograms: [MaintainProgram!]!
}

type BatteryVoltage {
  id: Int!
  createdAt: String!
  updatedAt: String!
  vehicle: Vehicle!
  voltage: Float!
  by: Device!
}

type Environment {
  id: Int!
  createdAt: String!
  updatedAt: String!
  device: Device!
  humidity: Float!
  temperature: Float!
  by: Device!
}

type Speed {
  id: Int!
  createdAt: String!
  updatedAt: String!
  vehicle: Vehicle!
  speed: Float!
  by: Device!
}

type Temperature {
  id: Int!
  createdAt: String!
  updatedAt: String!
  device: Device!
  temperature: Float!
  by: Device!
}

type Location {
  id: Int!
  createdAt: String!
  updatedAt: String!
  vehicle: Vehicle!
  lat: Float!
  long: Float!
  time: String!
  by: Device!
}

type Device {
  id: Int!
  createdAt: String!
  updatedAt: String!

  # Unique Device Identification
  udi: String!
  name: String
  state: DeviceState!
  description: String
  vehicle: Vehicle
  temperatures: [Temperature!]!
  enviroments: [Environment!]!
  speeds: [Speed!]!
  batteryVoltages: [BatteryVoltage!]!
  locations: [Location!]!
}

# Trạng thái thiết bị
enum DeviceState {
  INIT
  READY
  DISCONNECTED
  SLEEPING
  LOST
  ALERT
}

type Error {
  field: String
  message: String!
}

type LocationResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Location
}

type LocationTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: LocationTableDataResponse
}

type LocationTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Location!]!
}

type TemperatureResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Temperature
}

type TemperatureTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: TemperatureTableDataResponse
}

type TemperatureTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Temperature!]!
}

type NotificationMethod {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  accountNotificationMethod: [AccountNotificationMethod!]!
}

type AccountNotificationMethod {
  id: Int!
  createdAt: String!
  updatedAt: String!
  enable: Boolean!
  account: Account!
  notificationMethod: NotificationMethod!
  notification: Notification!
}

type Notification {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String
  group: NotificationGroup
  accountNotificationMethod: [AccountNotificationMethod!]!
}

type NotificationGroup {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String
}

type AccountNotificationGroup {
  id: Int!
  createdAt: String!
  updatedAt: String!
  enable: Boolean!
  account: Account!
  notificationGroup: NotificationGroup!
}

type InspectionItem {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  type: InspectionItemType!
  inspectionFormItem: [InspectionFormItem!]!
}

# Inspection item type type
enum InspectionItemType {
  CHOICES
  PASSORFAIL
  DATETIME
  RANGETIME
}

type InspectionFormItem {
  id: Int!
  createdAt: String!
  updatedAt: String!
  required: Boolean!
  shortDescription: String!
  instruction: String!
  remarkForPass: Boolean!
  remarkForFail: Boolean!
  isPass: Boolean
  choices: String
  date: DateTime
  rangeStart: Float
  rangeEnd: Float
  inspectionForm: InspectionForm!
  inspectionItem: InspectionItem!
}

type InspectionForm {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  createdBy: Float!
  inspectionFormItem: [InspectionFormItem!]!
}

type Post {
  id: Int!
  createdAt: String!
  updatedAt: String!
  title: String!
}

type User implements IResource {
  id: ID!
  createdAt: String!
  updatedAt: String!
  email: String!
  password: String!
}

type AccountResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Account
  accessToken: String
}

type AccountTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: AccountTableDataResponse
}

type AccountTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Account!]!
}

type DecisionResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Decision
}

type DecisionTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: DecisionTableDataResponse
}

type DecisionTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Decision!]!
}

type DeviceResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Device
}

type DeviceStateCount {
  init: Float!
  disconnected: Float!
  ready: Float!
  sleeping: Float!
  alert: Float!
  lost: Float!
}

type DeviceStateCountResponse implements IResponse {
  errors: [Error!]
  message: String
  result: DeviceStateCount
}

type DeviceTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: DeviceTableDataResponse
}

type DeviceTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Device!]!
}

type EmployeeResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Employee
}

type EmployeeTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: EmployeeTableDataResponse
}

type EmployeeTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Employee!]!
}

type ExpenseResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Expense
}

type ExpenseTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: ExpenseTableDataResponse
}

type ExpenseTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Expense!]!
}

type Province {
  name: String!
  type: String!
  slug: String!
  nameWithType: String!
  code: String!
}

type District {
  name: String!
  type: String!
  slug: String!
  nameWithType: String!
  path: String!
  pathWithType: String!
  code: String!
  parentCode: String!
}

type Village {
  name: String!
  type: String!
  slug: String!
  nameWithType: String!
  path: String!
  pathWithType: String!
  code: String!
  parentCode: String!
}

type ProvincesTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: ProvinceTableDataResponse
}

type ProvinceTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Province!]!
}

type DistrictsTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: DistrictTableDataResponse
}

type DistrictTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [District!]!
}

type VillagesTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VillageTableDataResponse
}

type VillageTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Village!]!
}

type InspectionFormResponse implements IResponse {
  errors: [Error!]
  message: String
  result: InspectionForm
}

type InspectionTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: InspectionFormTableDataResponse
}

type InspectionFormTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [InspectionForm!]!
}

type IssueResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Issue
}

type IssueTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: IssueTableDataResponse
}

type IssueTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Issue!]!
}

type LabelResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Label
}

type LabelTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: LabelTableDataResponse
}

type LabelTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Label!]!
}

type MaintainTaskResponse implements IResponse {
  errors: [Error!]
  message: String
  result: MaintainTask
}

type MaintainTaskTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: MaintainTaskTableDataResponse
}

type MaintainTaskTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [MaintainTask!]!
}

type ManufacturerResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Manufacturer
}

type ManufacturerTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: ManufacturerTableDataResponse
}

type ManufacturerTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Manufacturer!]!
}

type MobilizationSessionResponse implements IResponse {
  errors: [Error!]
  message: String
  result: MobilizationSession
}

type MobilizationSessionTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: MobilizationSessionTableDataResponse
}

type MobilizationSessionTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [MobilizationSession!]!
}

type PermissionResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Permission
}

type PermissionTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: PermissionTableDataResponse
}

type PermissionTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Permission!]!
}

type ProjectResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Project
}

type ProjectTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: ProjectTableDataResponse
}

type ProjectTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Project!]!
}

type RoleResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Role
}

type RoleTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: RoleTableDataResponse
}

type RoleTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Role!]!
}

type VehicleResponse implements IResponse {
  errors: [Error!]
  message: String
  result: Vehicle
}

type VehicleTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleTableDataResponse
}

type VehicleTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [Vehicle!]!
}

type VehicleFuelResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleFuel
}

type VehicleFuelTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleFuelTableDataResponse
}

type VehicleFuelTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [VehicleFuel!]!
}

type VehicleModelCountVehicle {
  id: Int!
  createdAt: String!
  updatedAt: String!
  manufacturer: Manufacturer!
  name: String!
  vehicles: [Vehicle!]!
  vehicleCount: Float!
}

type VehicleModelResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleModel
}

type VehicleModelTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleModelCountVehicleTableDataResponse
}

type VehicleModelCountVehicleTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [VehicleModelCountVehicle!]!
}

type VehicleStatusResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleStatus
}

type VehicleStatusTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleStatusTableDataResponse
}

type VehicleStatusTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [VehicleStatus!]!
}

type VehicleTypeCountVehicle {
  id: Int!
  createdAt: String!
  updatedAt: String!
  name: String!
  vehicles: [Vehicle!]!
  vehicleCount: Float!
}

type VehicleTypeResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleType
}

type VehicleTypeTableResponse implements IResponse {
  errors: [Error!]
  message: String
  result: VehicleTypeCountVehicleTableDataResponse
}

type VehicleTypeCountVehicleTableDataResponse implements IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
  list_data: [VehicleTypeCountVehicle!]!
}

# Thông tin phản hồi có trong kết quả trả về của của toàn bộ API
interface IResponse {
  errors: [Error!]
  message: String
}

# Thông tin phản hồi có trong kết quả trả về của của toàn bộ API phân trang
interface IPagination {
  total: Float!
  perPage: Float!
  numPage: Float!
}

# Thông tin mà toàn bộ tài nguyên trong hệ thống đều có
interface IResource {
  id: ID!
  createdAt: String!
  updatedAt: String!
}

input ExpenseInput {
  name: String!
  vehicles: [VehicleInput!] = []
}

input MaintainTaskInput {
  name: String!
  description: String!
  maintainProgramTask: [MaintainProgramTaskInput!] = []
}

input MaintainProgramTaskInput {
  timeThreshold: Float!
  distanceThreshold: Float!
  done: Boolean!
  maintainProgram: MaintainProgramInput!
  maintainTask: MaintainTaskInput!
}

input MaintainProgramInput {
  name: String!
  description: String!
  vehicles: [VehicleInput!] = []
  maintainProgramTask: [MaintainProgramTaskInput!] = []
}

input ManufacturerInput {
  name: String!
  vehicles: [VehicleInput!] = []
}

input ReportInput {
  driver: DriverInput!
}

input ProjectInput {
  name: String!
  description: String
  start: DateTime!
  end: DateTime!
  value: String!
  place: String
  companyRole: String!
  progress: Float!
  mobilizationSessions: [MobilizationSessionInput!] = []
}

input ProjectDriverInput {
  driver: DriverInput!
  project: ProjectInput!
  manager: ManagerInput!
}

input RefillHistoryInput {
  driver: DriverInput!
  vehicle: VehicleInput!
  type: RefillHistoryType!
  time: DateTime!
  price: String!
  currentPrice: String!
}

input MaintainHistoryInput {
  driver: DriverInput!
  vehicle: VehicleInput!
  type: MaintainHistoryType!
  time: DateTime!
}

input LabelInput {
  name: String!
  issues: [LabelInput!] = []
}

input IssueInput {
  description: String!
  status: String!
  dueDate: DateTime!
  assignees: [EmployeeInput!] = []
  vehicle: VehicleInput!
  labels: [LabelInput!] = []
}

input PlaceInput {
  province: String!
  district: String!
  village: String!
}

input EmployeeInput {
  name: String!
  phone: String
  address: String
  dateOfBirth: String
  salary: Float
  unit: String
  startWork: String
  endWork: String
  driver: DriverInput
  manager: ManagerInput
  issues: IssueInput
}

input DriverInput {
  licenseNumber: String
  licenseClass: String
  licenseWhere: String
  employee: EmployeeInput!
  account: AccountInput
  reports: [ReportInput!] = []
  projectDrivers: [ProjectDriverInput!] = []
  refillHistories: [RefillHistoryInput!] = []
  maintainHistories: [MaintainHistoryInput!] = []
  mobilizationSessions: [MobilizationSessionInput!] = []
}

input PermissionInput {
  name: String!
  roles: [RoleInput!] = []
}

input RoleInput {
  name: String!
  accounts: [AccountInput!] = []
  permissions: [PermissionInput!] = []
}

input AccountInput {
  email: String!
  avatar: String = null
  password: String!
  verify: Boolean!
  lastActive: String = "1620456002010"
  root: Boolean
  driver: DriverInput
  manager: ManagerInput
  roles: [RoleInput!] = []
}

input ManagerProjectInput {
  manager: ManagerInput!
  project: ProjectInput!
}

input ProjectVehicleInput {
  driver: DriverInput!
  project: ProjectInput!
  manager: ManagerInput!
}

input ManagerInput {
  employee: EmployeeInput!
  account: AccountInput
  projectDrivers: [ProjectDriverInput!] = []
  managerProjects: [ManagerProjectInput!] = []
  projectVehicles: [ProjectDriverInput!] = []
  decisions: [DecisionInput!] = []
}

input DecisionInput {
  manager: ManagerInput!
  mobilizationSessions: [MobilizationSessionInput!] = []
}

input MobilizationSessionInput {
  start: DateTime!
  startOdometer: Float!
  end: DateTime
  endOdometer: Float
  pending: Boolean!
  driver: DriverInput!
  manager: ManagerInput!
  vehicle: VehicleInput!
  decision: DecisionInput!
  project: ProjectInput
  description: String!
}

input VehicleFuelInput {
  name: String!
  vehicles: [VehicleInput!] = []
}

input VehicleModelInput {
  manufacturer: ManufacturerInput!
  name: String!
  vehicles: [VehicleInput!] = []
}

input VehicleStatusInput {
  name: String!
  description: String
  background: String
  vehicles: [VehicleInput!] = []
}

input VehicleTypeInput {
  name: String!
  vehicles: [VehicleInput!] = []
}

input VehicleInput {
  name: String!
  weight: Float!
  information: String!
  description: String!
  maintainTime: Float!
  hoursWorked: Float!
  guaranteeTime: DateTime!
  odometer: Float!
  speed: Float!
  vin: String!
  license_plate: String!
  year: String!
  runTime: Float!
  manufacturer: ManufacturerInput!
  model: VehicleModelInput!
  status: VehicleStatusInput!
  fuel: VehicleFuelInput!
  type: VehicleTypeInput!
  expenses: [ExpenseInput!] = []
  mobilizationSessions: [MobilizationSessionInput!] = []
  maintainPrograms: [MaintainProgramInput!] = []
}

input BatteryVoltageInput {
  vehicle: VehicleInput!
  voltage: Float!
  by: DeviceInput!
}

input EnvironmentInput {
  device: DeviceInput!
  humidity: Float!
  temperature: Float!
  by: DeviceInput!
}

input SpeedInput {
  vehicle: VehicleInput!
  speed: Float!
  by: DeviceInput!
}

input TemperatureInput {
  device: DeviceInput!
  temperature: Float!
  by: DeviceInput!
}

input LocationInput {
  vehicle: VehicleInput!
  lat: Float!
  long: Float!
  time: String!
  by: DeviceInput!
}

input DeviceInput {
  # Unique Device Identification
  udi: String!
  name: String
  state: DeviceState!
  description: String
  vehicle: VehicleInput
  temperatures: [TemperatureInput!] = []
  enviroments: [EnvironmentInput!] = []
  speeds: [SpeedInput!] = []
  batteryVoltages: [BatteryVoltageInput!] = []
  locations: [LocationInput!] = []
}

input QueryOptions {
  sort: [SortOption!]
  filter: [FilterOption!]
  numPage: Float
  perPage: Float
}

input FilterOption {
  field: String!
  operation: FilterOperation!
  value: String!
}

# Operation filter
enum FilterOperation {
  CONTAINS
  START
  END
}

input SortOption {
  field: String!
  direction: SortDirection!
}

# Sort Direction
enum SortDirection {
  ASC
  DESC
}

input locationInput {
  deviceUdi: String
  jsonData: String
}

input temperatureInput {
  deviceUdi: String
  floatData: Float
}

input NotificationMethodInput {
  name: String!
  accountNotificationMethod: [AccountNotificationMethodInput!] = []
}

input AccountNotificationMethodInput {
  enable: Boolean!
  account: AccountInput!
  notificationMethod: NotificationMethodInput!
  notification: NotificationInput!
}

input NotificationInput {
  name: String!
  description: String
  group: NotificationGroupInput
  accountNotificationMethod: [AccountNotificationMethodInput!] = []
}

input NotificationGroupInput {
  name: String!
  description: String
}

input AccountNotificationGroupInput {
  enable: Boolean!
  account: AccountInput!
  notificationGroup: NotificationGroupInput!
}

input InspectionItemInput {
  name: String!
  type: InspectionItemType!
  inspectionFormItem: [InspectionFormItemInput!] = []
}

input InspectionFormItemInput {
  required: Boolean!
  shortDescription: String!
  instruction: String!
  remarkForPass: Boolean!
  remarkForFail: Boolean!
  isPass: Boolean
  choices: String
  date: DateTime
  rangeStart: Float
  rangeEnd: Float
  inspectionForm: InspectionFormInput!
  inspectionItem: InspectionItemInput!
}

input InspectionFormInput {
  name: String!
  createdBy: Float!
  inspectionFormItem: [InspectionFormItemInput!] = []
}

input PostInput {
  title: String!
}

input UserInput {
  email: String!
  password: String!
}

input DriverAccountCreateInput {
  email: String!
  driverId: Float!
  avatar: Upload
}

# The `Upload` scalar type represents a file upload.
scalar Upload

input ManagerAccountCreateInput {
  email: String!
  managerId: Float!
  password: String!
  avatar: Upload
}

input RootAccountCreateInput {
  email: String!
  password: String!
}

input AccountLoginInput {
  email: String!
  password: String!
}

input AccountDeleteInput {
  id: Float!
}

input DecisionCreateInput {
  managerId: Float!
}

input DeviceCreateInput {
  vehicleId: Float!
  name: String!
  udi: String!
}

input DeviceUpdateInput {
  id: Float!
  name: String
  vehicleId: Float
}

input DeviceDeleteInput {
  id: Float!
}

input EmployeeCreateInput {
  name: String!
  phone: String
  address: PlaceInput
  dateOfBirth: String
  salary: Float
  unit: String
  startWork: String
  endWork: String
}

input DriverEmployeeCreateInput {
  name: String!
  phone: String
  address: PlaceInput
  dateOfBirth: String
  salary: Float
  unit: String
  startWork: String
  endWork: String
  licenseNumber: String
  licenseClass: String
  licenseWhere: String
}

input ManagerEmployeeCreateInput {
  name: String!
  phone: String
  address: PlaceInput
  dateOfBirth: String
  salary: Float
  unit: String
  startWork: String
  endWork: String
}

input EmployeeUpdateInput {
  id: Float!
  name: String
  phone: String
  address: PlaceInput
  dateOfBirth: String
  salary: Float
  unit: String
  startWork: String
  endWork: String
  licenseNumber: String
  licenseClass: String
  licenseWhere: String
}

input ExpenseCreateInput {
  name: String!
}

input ExpenseUpdateInput {
  id: Float!
  name: String
}

input ChoicesInput {
  choices: String!
  failIfChecked: Boolean!
}

input InspectionItemInputForm {
  inspectionItemId: Float!
  remarkForPass: Boolean!
  remarkForFail: Boolean!
  choices: [ChoicesInput!]
  rangeStart: Float
  rangeEnd: Float
  isPass: Boolean
  date: DateTime
}

input InspectionFormCreateInput {
  name: String!
  inspectionItems: [InspectionItemInputForm!]!
}

input InspectionFormUpdateInput {
  inspectionFormId: Float!
  inspectionItems: [InspectionItemInputForm!]!
}

input IssueCreateInput {
  description: String!
  vehicleId: Float!
  labelIds: [Float!]!
  assigneeId: Float
}

input IssueUpdateInput {
  id: Float!
  description: String
  vehicleId: Float
  labelIds: [Float!]
  assgineeId: Float
}

input createLabelInput {
  name: String!
}

input updateLabelInput {
  id: Float!
  name: String
}

input deleteLabelInput {
  id: Float!
}

input createMaintainTaskInput {
  name: String!
  description: String!
}

input updateMaintainTaskInput {
  id: Float!
  newName: String
  newDescription: String
}

input deleteMaintainTaskInput {
  id: Float
}

input ManufacturerCreateInput {
  name: String!
}

input ManufacturerUpdateInput {
  id: Float!
  name: String
}

input MobilizationSessionCreateInput {
  driverId: Float!
  decisionId: Float!
  vehicleId: Float!
  projectId: Float
  start: DateTime!
  end: DateTime!
  startOdometer: Float!
  endOdometer: Float
  pending: Boolean!
  description: String
}

input MobilizationSessionEditInput {
  id: Float!
  start: DateTime
  end: DateTime
  startOdometer: Float
  endOdometer: Float
  pending: Boolean
  description: String
  driverId: Float
  managerId: Float
  vehicleId: Float
  projectId: Float
}

input PermissionCreateInput {
  name: String!
}

input PermissionUpdateInput {
  id: Float!
  name: String
}

input ProjectCreateInput {
  name: String!
  description: String
  value: String
  place: PlaceInput
  companyRole: String
  progress: Float!
  start: DateTime!
  end: DateTime
}

input ProjectUpdateInput {
  id: Float
  name: String
  description: String
  value: String
  place: PlaceInput
  companyRole: String
  progress: Float
  mobilizationSessionId: Float
}

input GetPermissionsByRoleInput {
  roleName: String!
}

input RoleCreateInput {
  name: String!
  permissionNames: [String!]
}

input RoleUpdateInput {
  id: Float
  name: String
  permissionNames: [String!]
}

input VehicleCreateInput {
  manufacturerId: Float!
  modelId: Float!
  vehicleFuelId: Float!
  vehicleTypeId: Float!
  vehicleStatusId: Float!
  weight: Float!
  name: String!
  information: String!
  description: String!
  maintainTime: Float!
  hoursWorked: Float!
  odometer: Float!
  guaranteeTime: DateTime!
}

input GetVehicleByModelInput {
  modelName: String
}

input VehicleEditInput {
  id: Float!
  name: String
  manufacturerId: Float
  modelId: Float
  vehicleFuelId: Float
  vehicleTypeId: Float
  vehicleStatusId: Float
  weight: Float
  information: String
  description: String
  maintainTime: Float
  hoursWorked: Float
  guaranteeTime: DateTime
  odometer: Float
}

input VehicleDeleteInput {
  id: Float!
}

input VehicleFuelCreateInput {
  name: String!
}

input VehicleFuelUpdateInput {
  id: Float!
  name: String
}

input GetVehicleModelsByManufacturerInput {
  manufacturerName: String!
}

input VehicleModelCreateInput {
  name: String!
  manufacturerName: String!
}

input VehicleModelUpdateInput {
  id: Float!
  name: String
  manufacturernName: String
}

input VehicleStatusCreateInput {
  name: String!
  description: String
  background: String
}

input VehicleStatusUpdateInput {
  id: Float!
  name: String
  description: String
  background: String
}

input VehicleTypeCreateInput {
  name: String!
}

input VehicleTypeUpdateInput {
  id: Float!
  name: String!
}

type Query {
  getLocationOfDevice(inputs: String): LocationTableResponse!
  getTemperatureOfDevice(inputs: String): TemperatureTableResponse!
  getAccounts(inputs: QueryOptions): AccountTableResponse!
  me: AccountResponse!
  getDecisions(inputs: QueryOptions): DecisionTableResponse!
  getDevices(inputs: QueryOptions): DeviceTableResponse!
  getDevice(id: Float!): DeviceResponse!
  getDeviceStatus: DeviceStateCountResponse!
  getEmployees(inputs: QueryOptions): EmployeeTableResponse!
  getDriverEmployees(inputs: QueryOptions): EmployeeTableResponse!
  getManagerEmployees(inputs: QueryOptions): EmployeeTableResponse!
  getEmployee(inputs: Float!): EmployeeResponse!
  getExpenses(inputs: QueryOptions): ExpenseTableResponse!
  getExpense(inputs: Float!): ExpenseResponse!
  getProvinces: ProvincesTableResponse!
  getDistrictsByProvince(inputs: String): DistrictsTableResponse!
  getVillagesByDistrict(inputs: String): VillagesTableResponse!
  getInspectionForms(inputs: QueryOptions): InspectionTableResponse!
  getInspectionForm(inputs: Float!): InspectionFormResponse!
  getIssues(inputs: QueryOptions): IssueTableResponse!
  getIssue(id: Float!): IssueResponse!
  getLabelById(intput: Float): LabelResponse!
  getLabelByIssueId(inputs: Float): LabelTableResponse!
  getLabelTable(inputs: QueryOptions): LabelTableResponse!
  getMaintainTaskByName(inputs: String): MaintainTaskTableResponse!
  getMaintainTaskTable(inputs: QueryOptions): MaintainTaskTableResponse!
  getManufacturers(inputs: QueryOptions): ManufacturerTableResponse!
  getMobilizationSession(inputs: Float!): MobilizationSessionResponse!
  getMobilizationSessions(inputs: QueryOptions): MobilizationSessionTableResponse!
  posts: [Post!]!
  getProjects(inputs: QueryOptions): ProjectTableResponse!
  getProject(id: Float!): ProjectResponse!
  getRoles(inputs: QueryOptions): RoleTableResponse!
  getRole(inputs: Float!): RoleResponse!
  getPermissions(options: QueryOptions, inputs: GetPermissionsByRoleInput!): PermissionTableResponse!
  getVehicles(inputs: QueryOptions): VehicleTableResponse!
  getVehicle(id: Float!): VehicleResponse!
  getVehiclesByModel(inputs: GetVehicleByModelInput): VehicleTableResponse!
  getVehicleFuels(inputs: QueryOptions): VehicleFuelTableResponse!
  getVehicleFuel(inputs: Float!): VehicleFuelResponse!
  getVehicleModelsByManufacturer(options: QueryOptions, inputs: GetVehicleModelsByManufacturerInput!): VehicleModelTableResponse!
  getVehicleStatuses(inputs: QueryOptions): VehicleStatusTableResponse!
  getVehicleStatus(inputs: Float!): VehicleStatusResponse!
  getVehicleTypes(inputs: QueryOptions): VehicleTypeTableResponse!
  getVehicleType(inputs: Float!): VehicleTypeResponse!
}

type Mutation {
  updateLocationOfDevice(inputs: locationInput): LocationResponse!
  updateTemperatureOfDevice(inputs: temperatureInput): TemperatureResponse!
  createRootAccount(inputs: RootAccountCreateInput!): AccountResponse!
  createManagerAccount(inputs: ManagerAccountCreateInput!): AccountResponse!
  createDriverAccount(inputs: DriverAccountCreateInput!): AccountResponse!
  logout: AccountResponse!
  login(inputs: AccountLoginInput!): AccountResponse!
  deleteAccount(inputs: AccountDeleteInput!): AccountResponse!
  createDecision(inputs: DecisionCreateInput!): DecisionResponse!
  createDevice(inputs: DeviceCreateInput!): DeviceResponse!
  updateDevice(inputs: DeviceUpdateInput!): DeviceResponse!
  deleteDevice(inputs: DeviceDeleteInput!): DeviceResponse!
  createDriverEmployee(inputs: DriverEmployeeCreateInput!): EmployeeResponse!
  createManagerEmployee(inputs: ManagerEmployeeCreateInput!): EmployeeResponse!
  updateEmployee(inputs: EmployeeUpdateInput!): EmployeeResponse!
  deleteEmployee(inputs: Float!): EmployeeResponse!
  createExpense(inputs: ExpenseCreateInput!): ExpenseResponse!
  updateExpense(inputs: ExpenseUpdateInput!): ExpenseResponse!
  deleteExpense(inputs: Float!): ExpenseResponse!
  createInspectionForm(inputs: InspectionFormCreateInput!): InspectionFormResponse!
  updateInspectionForm(inputs: InspectionFormUpdateInput!): InspectionFormResponse!
  deleteInspectionForm(inputs: Float!): InspectionFormResponse!
  createIssue(inputs: IssueCreateInput!): IssueResponse!
  updateIssue(inputs: IssueUpdateInput!): IssueResponse!
  deleteIssue(inputs: Float!): IssueResponse!
  createLabel(inputs: createLabelInput!): LabelResponse!
  updateLabel(inputs: updateLabelInput!): LabelResponse!
  deleteLabel(inputs: deleteLabelInput!): LabelResponse!
  createMaintainTask(inputs: createMaintainTaskInput): MaintainTaskResponse!
  createManufacturer(inputs: ManufacturerCreateInput!): ManufacturerResponse!
  updateManufacturer(inputs: ManufacturerUpdateInput!): ManufacturerResponse!
  createMobilizationSession(inputs: MobilizationSessionCreateInput!): MobilizationSessionResponse!
  updateMobilizationSession(inputs: MobilizationSessionEditInput!): MobilizationSessionResponse!
  completeMobilizationSession(inputs: Float!): MobilizationSessionResponse!
  createPermission(inputs: PermissionCreateInput!): PermissionResponse!
  updatePermission(inputs: PermissionUpdateInput!): PermissionResponse!
  deletePermission(inputs: Float!): PermissionResponse!
  deletePost(id: Float!): Boolean!
  createProject(inputs: ProjectCreateInput!): ProjectResponse!
  updateProject(inputs: ProjectUpdateInput!): ProjectResponse!
  deleteProject(inputs: Float!): ProjectResponse!
  createRole(inputs: RoleCreateInput!): RoleResponse!
  updateRole(inputs: RoleUpdateInput!): RoleResponse!
  deleteRole(inputs: Float!): RoleResponse!
  createVehicle(inputs: VehicleCreateInput!): VehicleResponse!
  updateVehicle(inputs: VehicleEditInput!): VehicleResponse!
  deleteVehicle(inputs: VehicleDeleteInput!): VehicleResponse!
  createVehicleFuel(inputs: VehicleFuelCreateInput!): VehicleFuelResponse!
  updateVehicleFuel(inputs: VehicleFuelUpdateInput!): VehicleFuelResponse!
  deleteVehicleFuel(inputs: Float!): VehicleFuelResponse!
  createVehicleModel(inputs: VehicleModelCreateInput!): VehicleModelResponse!
  updateVehicleModel(inputs: VehicleModelUpdateInput!): VehicleModelResponse!
  createVehicleStatus(inputs: VehicleStatusCreateInput!): VehicleStatusResponse!
  updateVehicleStatus(inputs: VehicleStatusUpdateInput!): VehicleStatusResponse!
  deleteVehicleStatus(inputs: Float!): VehicleStatusResponse!
  createVehicleType(inputs: VehicleTypeCreateInput!): VehicleTypeResponse!
  updateVehicleType(inputs: VehicleTypeUpdateInput!): VehicleTypeResponse!
  deleteVehicleType(inputs: Float!): VehicleTypeResponse!
}
